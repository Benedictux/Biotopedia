<?php
// src/Biotopedia/UsersBundle/Entity/UserRepository.php
namespace Biotopedia\UsersBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * FamilleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	//Récupère la totalité des familles en B.D. et les classe par ordre alphabetique
	public function findAllOrderedByUsername()
	{
		//Récupère le QueryBuilder puis la Query corespondant à la selection et Result
		$qb = $this
		->createQueryBuilder('u')
		// Jointure sur l'attribut poissons
		->leftJoin('u.poissons', 'p')
		->addSelect('p')
		// Jointure sur l'attribut familles
		->leftJoin('u.familles', 'f')
		->addSelect('p')
		// Jointure sur l'attribut articles
		->leftJoin('u.articles', 'a')
		->addSelect('p')
		->orderBy('u.username', 'ASC');

		//recupére la Query du QueryBuilder "$qb" puis le résultat de la Query sous forme d'array (tableau)
    	return $qb->getQuery()->getResult();
	}

	public function findAllActive()
    {
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime('2 minutes ago'));
 
        $qb = $this
        ->createQueryBuilder('u')
        ->where('u.lastactivity > :delay')
        ->setParameter('delay', $delay)
        ;
 
        return $qb->getQuery()->getResult();
    }

	//Recupère les data d'un user selon son salt
	public function findOneBySalt($salt)
	{
		$qb = $this
		->createQueryBuilder('u')
		->where('u.salt = :salt')
		->setParameter('salt', $salt);

		try {
			//getSingleResult retourne un seul resultat sous forme d'entité et non d'un array (tableau)
			return $qb->getQuery()->getSingleResult();
		}
    	catch (\Doctrine\ORM\NoResultException $e){
        	return null;
        }
	}

	public function countUsers()
	{
		//getSingleScalarResult permet de ne retourner qu'une seule valeur
    	return $this
    	->createQueryBuilder('u')
    	->select('COUNT(u)')
    	->getQuery()->getSingleScalarResult();
	}
}