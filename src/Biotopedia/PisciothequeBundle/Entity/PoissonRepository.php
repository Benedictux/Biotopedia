<?php
// src/Biotopedia/PisciothequeBundle/Entity/PoissonRepository.php
namespace Biotopedia\PisciothequeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * PoissonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PoissonRepository extends EntityRepository
{
	//Récupère la totalité des poisson en B.D. et les classe par ordre alphabetique
	public function findAllOrderedByName()
	{
		//Récupère le QueryBuilder puis la Query corespondant à la selection et Result
		$qb = $this->createQueryBuilder('p')
		// Jointure sur l'attribut famille
		->leftJoin('p.famille', 'f')
		->addSelect('f')
		->orderBy('p.scientific_name', 'ASC');

    	return $qb->getQuery()->getResult();
	}


	//Recupère les datas du poisson selon son id
	public function findOneById($id)
	{
		$qb = $this->createQueryBuilder('p')
		->where('p.id = :id')
		->setParameter('id', $id);

		try {
			return $qb->getQuery()->getResult();
		}
    	catch (\Doctrine\ORM\NoResultException $e){
        	return null;
        }
	}

	//Recupère les data d'un poisson selon son scientific_name
	public function findOneByName($scientific_name)
	{
		$qb = $this
		->createQueryBuilder('p')
		->where('p.scientific_name = :scientific_name')
		->setParameter('scientific_name', $scientific_name);

		try {
			return $qb->getQuery()->getResult();
		}
    	catch (\Doctrine\ORM\NoResultException $e){
        	return null;
        }
	}

	public function getPoissonWithFamille()
	{
		$qb = $this
		->createQueryBuilder('p')
		->leftJoin('p.famille', 'famille')
		->addSelect('famille');
		return $qb->getQuery()->getResult();
	}

	public function countPoissons()
	{
		//getSingleScalarResult permet de ne retourner qu'une seule valeur
    	return $this
    	->createQueryBuilder('p')
    	->select('COUNT(p)')
    	->getQuery()->getSingleScalarResult();
	}
}